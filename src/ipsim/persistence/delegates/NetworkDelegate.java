package ipsim.persistence.delegates;
/*
import com.rickyclarkson.testsuite.*;
import static ipsim.Caster.*;
import ipsim.*;
import ipsim.property.*;
import static ipsim.NetworkContext.*;
import ipsim.gui.*;
import ipsim.network.*;
import ipsim.network.connectivity.*;
import ipsim.network.ethernet.*;
import static ipsim.network.NetMask.*;
import static ipsim.network.IPAddressUtility.valueOf;
import ipsim.persistence.*;
import static ipsim.persistence.XMLDeserialiser.*;
import static ipsim.persistence.delegates.LogDelegate.*;
import ipsim.util.*;
import org.jetbrains.annotations.*;
import org.w3c.dom.*;
import fpeas.predicate.Predicate;
import java.util.*;
import fpeas.lazy.Lazy;

public class NetworkDelegate
{
	public static SerialisationDelegate<Network, Network> networkDelegate(final Network network)
	{
		return new SerialisationDelegate<Network, Network>()
		{
			public void writeXML(final XMLSerialiser serialiser, final Network object)
			{
				{
					int a=0;
					for (final NetworkContext context : network.contexts.get())
					{
						serialiser.writeObject(context, "context "+a, delegate(network));
						a++;
					}
				}

				serialiser.writeObject(network.ispContext, "ispContext", delegate(network));

				serialiser.writeObject(network.log, "log", logDelegate(network));
			}

			public Network readXML(final XMLDeserialiser deserialiser, final Node node, final Network object)
			{
				network.contexts.clear();
				//single-network files generated by old versions will have a 'problem' here.  Newer versions
				//have it in the NetworkContext.  So if we find an old one, we need to create a NetworkContext
				//for it and set the problem accordingly.  If a file has no problem and no NetworkContexts,
				//create a new NetworkContext.
				final Problem problem=deserialiser.readObject(
						node, "problem", ProblemDelegate.problemDelegate, asFunction(Problem.class)
				);

				boolean newFile=false;

				if (problem==null) //either a new file or an old one with no problem set.
				{
					for (final String name : new TreeSet<String>(getObjectNames(node)))
						if (name.startsWith("context "))
						{
							newFile=true;
							//if we ever get here it's a new file
							network.contexts.append(deserialiser.readObject(node, name, delegate(network), asFunction(NetworkContext.class)));
						}

					if (network.contexts.get().isEmpty()) //it's an old file with no problem set
					{
						if (newFile)
							throw null;

						network.contexts.append(new NetworkContext());
					}
				}
				else
				{ //it's an old file with a problem set
					if (newFile)
						throw null;

					final NetworkContext networkContext=new NetworkContext();
					networkContext.problem.set(problem);
					network.contexts.append(networkContext);
				}

				network.ispContext.visibleComponents.clear();
				final NetworkContext ispContextAndOthers=deserialiser.readObject(
						node, "ispContext", delegate(network), asFunction(NetworkContext.class)
				);

				if (ispContextAndOthers!=null)
					network.ispContext.visibleComponents.merge(ispContextAndOthers.visibleComponents.get());

				for (final String name : getObjectNames(node))
					if (name.startsWith("child "))
					{
						if (newFile)
							throw null;
						//old file
						Stream<PacketSource> component=DelegateHelper.readFromDeserialiser(
								deserialiser, node, name, network
						);
						if (network.contexts.get().size()==1)
						{
							final StreamProperty<PacketSource> components=network.contexts.get().get(0).visibleComponents;

							components.prependIfNotPresent(component.car());
							network.contexts.get().get(0).visibleComponents.merge(component);
						}
						else
							throw null;
					}

				network.log.clear();

				network.log.entries.addAll(
						deserialiser.readObject(
								node, "log", logDelegate(network), asFunction(Network.Log.class)
						).entries.get()
				);

				network.modified=false;

				return network;
			}

			public Network construct()
			{
				return network;
			}

			@NotNull
			public String getIdentifier()
			{
				return "ipsim.persistence.delegates.NetworkDelegate";
			}
		};
	}

	public static final Lazy<Boolean> testNetworkWithISP=new Lazy<Boolean>()
	{
		public Boolean invoke()
		{
			Network network=new Network(null);
			network.contexts.prepend(new NetworkContext()).problem.set(new Problem(new NetBlock(valueOf("146.87.1.0").get(), NetMaskUtility.fromPrefixLength(24).get()), 2));
			MenuHandler.joinWithISP(network, null);
			final String xmlString=NetworkUtility.saveToString(network);
			NetworkUtility.loadFromString(network, xmlString);
			return network.contexts.get().car().visibleComponents.size()==2;
		}
	};
}*/